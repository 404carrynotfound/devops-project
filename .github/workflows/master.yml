name: Master-Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: py_api
  IMAGE_TAG: latest

jobs:
  static-style-code-analysis:
    name: Static style code analysis
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run static style code analysis
        uses: py-actions/flake8@v2
        with:
          ignore: "E302"

  type-checking:
    name: Type checking
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "src/requirements-dev.txt"

      - name: Type checking
        uses: tsuyoshicho/action-mypy@v3
        with:
          level: warning

  sonar-scan:
    name: Sonar scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sonar scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  synk-scan:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "src/requirements-dev.txt"

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk
        run: |
          snyk test --file=src/requirements-dev.txt --package-manager=pip
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    if: github.event_name != 'pull_request'
    name: Execute tests
    runs-on: ubuntu-latest
    needs: [ static-style-code-analysis, type-checking, synk-scan, sonar-scan ]
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "src/requirements-dev.txt"

      - name: Execute tests
        run: pytest src/api/tests/

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64

  scan-image:
    name: Scan image
    runs-on: ubuntu-latest
    needs: build-
    permissions:
      security-events: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: sarif
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to MiniKube
    steps:
      - name: Start MiniKube
        uses: medyagh/setup-minikube@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to MiniKube
        run:
          kubectl apply -f k8s/

      - name: Check deployment status
        run: kubectl rollout status deployment/api

      - name: Check Service
        run: curl $(minikube service api-port --url)

      - name: Stop MiniKube
        run: minikube stop
